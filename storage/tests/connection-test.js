#!/usr/bin/env node

/**
 * Database Connection Test
 * 
 * Tests the Supabase connection and table setup
 */

const { testConnection, getTableInfo, supabase } = require('../supabase/connection');

async function runConnectionTests() {
  console.log('üîç Testing Supabase Connection & Tables...\n');
  
  // Test 1: Basic connection
  console.log('1Ô∏è‚É£ Testing database connection...');
  const connectionOk = await testConnection();
  
  if (!connectionOk) {
    console.log('‚ùå Connection test failed. Exiting.');
    process.exit(1);
  }
  
  console.log('');
  
  // Test 2: Check tables exist
  console.log('2Ô∏è‚É£ Checking table accessibility...');
  const shortUrlsOk = await getTableInfo('short_urls');
  const analyticsOk = await getTableInfo('url_analytics');
  
  console.log('');
  
  // Test 3: Check RPC function
  console.log('3Ô∏è‚É£ Testing RPC function...');
  try {
    const { data, error } = await supabase.rpc('increment_click_count', {
      url_id_param: 'test-function-check'
    });
    
    // This should fail gracefully (URL doesn't exist) but function should be callable
    if (error && !error.message.includes('No rows')) {
      console.log('‚ö†Ô∏è  RPC function may not be available:', error.message);
    } else {
      console.log('‚úÖ RPC function is accessible');
    }
  } catch (error) {
    console.log('‚ö†Ô∏è  RPC function test failed:', error.message);
  }
  
  console.log('');
  
  // Test 4: Basic CRUD operations
  console.log('4Ô∏è‚É£ Testing basic CRUD operations...');
  
  const testUrlId = 'TEST01';
  const testData = {
    url_id: testUrlId,
    entity_type: 'test',
    entity_id: 'test-connection-001',
    original_url: 'https://example.com/test',
    metadata: { test: true, timestamp: new Date().toISOString() }
  };
  
  try {
    // INSERT
    console.log('   üìù Testing INSERT...');
    const { error: insertError } = await supabase
      .from('short_urls')
      .insert(testData);
    
    if (insertError) {
      console.log('   ‚ùå INSERT failed:', insertError.message);
    } else {
      console.log('   ‚úÖ INSERT successful');
    }
    
    // SELECT
    console.log('   üìñ Testing SELECT...');
    const { data: selectData, error: selectError } = await supabase
      .from('short_urls')
      .select('*')
      .eq('url_id', testUrlId)
      .single();
    
    if (selectError) {
      console.log('   ‚ùå SELECT failed:', selectError.message);
    } else {
      console.log('   ‚úÖ SELECT successful');
      console.log(`   üìä Retrieved: ${selectData.entity_type}/${selectData.entity_id}`);
    }
    
    // UPDATE
    console.log('   ‚úèÔ∏è  Testing UPDATE...');
    const { error: updateError } = await supabase
      .from('short_urls')
      .update({ click_count: 1 })
      .eq('url_id', testUrlId);
    
    if (updateError) {
      console.log('   ‚ùå UPDATE failed:', updateError.message);
    } else {
      console.log('   ‚úÖ UPDATE successful');
    }
    
    // DELETE
    console.log('   üóëÔ∏è  Testing DELETE...');
    const { error: deleteError } = await supabase
      .from('short_urls')
      .delete()
      .eq('url_id', testUrlId);
    
    if (deleteError) {
      console.log('   ‚ùå DELETE failed:', deleteError.message);
    } else {
      console.log('   ‚úÖ DELETE successful');
    }
    
  } catch (error) {
    console.log('   ‚ùå CRUD test failed:', error.message);
  }
  
  console.log('\nüéØ Connection tests completed!');
  console.log('üìã Summary:');
  console.log(`   ‚Ä¢ Database: ${connectionOk ? '‚úÖ' : '‚ùå'}`);
  console.log(`   ‚Ä¢ Tables: ${shortUrlsOk && analyticsOk ? '‚úÖ' : '‚ùå'}`);
  console.log('   ‚Ä¢ Ready for LongURL testing! üöÄ');
}

// Run tests
runConnectionTests().catch(console.error); 